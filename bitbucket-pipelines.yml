definitions:
  caches:
    service1: ~/.cache/service1
    invalid: $HOME/.cache/non-existing-folder
    custom:
      key:
        files: ["file1"]
      path: some-path
  services:
    postgres:
      image: postgres:alpine
      variables:
        POSTGRES_HOST_AUTH_METHOD: trust

image: alpine

pipelines:
  custom:
    test_success:
      - step:
          name: Test Success
          script:
            - cat /etc/os-release
            - id

    test_failure:
      - step:
          name: Test Failure
          script:
            - cat /etc/os-release
            - id
            - exit 69

    test_after_script:
      - step:
          name: Test After Script
          script:
            - cat /etc/os-release
            - exit 2
          after-script:
            - echo "Doing cleanup"
            - echo "Exit Code was ${BITBUCKET_EXIT_CODE}"

    test_default_cache:
      - step:
          name: Create Pip Cache
          caches:
            - pip
          script:
            - export CACHE_DIR=$HOME/.cache/pip
            - sh -c 'if [ -d "${CACHE_DIR}" ]; then rm -rf "${CACHE_DIR}"; fi'
            - mkdir -p "${CACHE_DIR}"
            - dd if=/dev/random of=${CACHE_DIR}/a bs=2048 count=1
            - dd if=/dev/random of=${CACHE_DIR}/b bs=2048 count=1
            - md5sum ${CACHE_DIR}/* > MD5SUM
            - mv MD5SUM ${CACHE_DIR}/
      - step:
          name: Ensure Caches Exists
          caches:
            - pip
          script:
            - export CACHE_DIR=$HOME/.cache/pip
            - md5sum -c ${CACHE_DIR}/MD5SUM

    test_cache_alpine:
      - step:
          name: Create Cache
          caches:
            - service1
          script:
            - export CACHE_DIR=$HOME/.cache/service1
            - sh -c 'if [ -d "${CACHE_DIR}" ]; then rm -rf "${CACHE_DIR}"; fi'
            - mkdir -p "${CACHE_DIR}"
            - dd if=/dev/random of=${CACHE_DIR}/a bs=2048 count=1
            - dd if=/dev/random of=${CACHE_DIR}/b bs=2048 count=1
            - md5sum ${CACHE_DIR}/* > MD5SUM
            - mv MD5SUM ${CACHE_DIR}/
      - step:
          name: Ensure Cache Exists
          caches:
            - service1
          script:
            - export CACHE_DIR=$HOME/.cache/service1
            - md5sum -c ${CACHE_DIR}/MD5SUM

    test_cache_debian:
      - step:
          name: Create Cache
          image: debian:bookworm-slim
          caches:
            - service1
          script:
            - export CACHE_DIR=$HOME/.cache/service1
            - sh -c 'if [ -d "${CACHE_DIR}" ]; then rm -rf "${CACHE_DIR}"; fi'
            - mkdir -p "${CACHE_DIR}"
            - dd if=/dev/random of=${CACHE_DIR}/a bs=2048 count=1
            - dd if=/dev/random of=${CACHE_DIR}/b bs=2048 count=1
            - md5sum ${CACHE_DIR}/* > MD5SUM
            - mv MD5SUM ${CACHE_DIR}/
      - step:
          name: Ensure Cache Exists
          image: debian:buster
          caches:
            - service1
          script:
            - export CACHE_DIR=$HOME/.cache/service1
            - md5sum -c ${CACHE_DIR}/MD5SUM

    test_invalid_cache:
      - step:
          name: Test Invalid Cache
          caches:
            - invalid
          script:
            - exit 0

    test_custom_cache:
      - step:
          name: Test Custom Cache
          caches:
            - custom
          script:
            - exit 0

    test_artifacts:
      - step:
          name: Create Artifacts
          artifacts:
            - ~/artifact-in-home
            - valid-folder/**
            - invalid-folder/**
            - folder-name
            - file-name
          script:
            - echo foo > ~/artifact-in-home
            - mkdir -p valid-folder/sub/sub/sub folder-name
            - touch valid-folder/a valid-folder/b valid-folder/sub/c
            - touch folder-name/a folder-name/b
            - touch file-name
      - step:
          name: Validate Artifacts
          script:
            - ls -R
            - "[ -e valid-folder/a ] || exit 1"
            - "[ -e valid-folder/b ] || exit 1"
            - "[ -e valid-folder/sub/c ] || exit 1"
            - "[ -e file-name ] || exit 1"

            - "[ -e ~/artifact-in-home ] && exit 1"
            - "[ -d valid-folder/sub/sub ] && exit 1"
            - "[ -d invalid-folder ] && exit 1"
            - "[ -d folder-name ] && exit 1"
            - "[ -d root ] && exit 1"
            - exit 0
      - step:
          name: Test no artifacts to save
          artifacts:
            - foobar/**
          script:
            - exit 0

    test_deployment_environment:
      - step:
          name: Test Bitbucket Deployment Environment
          deployment: Foo
          script:
            - 'echo "Deployment Environment: ${BITBUCKET_DEPLOYMENT_ENVIRONMENT}"'
            - if [ "${BITBUCKET_DEPLOYMENT_ENVIRONMENT:-}" != "Foo" ]; then
            -   exit 1
            - fi

    test_service:
      - step:
          name: Test postgres service
          script:
            - apk --no-cache add postgresql-client
            - ./ci-scripts/retry.sh 20 .1 psql -h localhost -U postgres -w -c 'SELECT 1;'
            # Ensure service _can't_ be reached by hostname
            - if psql -h postgres -U postgres -w -c 'SELECT 1;'; then
            -   exit 1
            - fi
          services:
            - postgres

    test_docker_in_docker:
      - step:
          name: Test docker in docker
          script:
            - apk --no-cache add curl
            - docker run -d --name nginx -p 8080:80 nginx:alpine
            - ./ci-scripts/retry.sh 20 .1 curl --fail 127.0.0.1:8080
          services:
            - docker
          caches:
            - docker
      - step:
          name: Ensure docker cache
          script:
            - docker image inspect nginx:alpine -f "{{.RepoTags}}"
          services:
            - docker
          caches:
            - docker

    test_run_as_user:
      - step:
          name: Test Default User
          script:
            - 'if [ "$(id -u)" != "0" ]; then'
            -   'echo "User is $(id)"'
            -    exit 1
            - fi

            - touch foo
            - 'if [ "$(stat -c "%u" foo)" != "0" ]; then'
            -   'echo "File is $(stat foo)"'
            -    exit 1
            - fi
      - step:
          name: Test Custom User
          image:
            name: alpine
            run-as-user: 1000
          script:
            - 'if [ "$(id -u)" != "1000" ]; then'
            -   'echo "User is $(id)"'
            -    exit 1
            - fi

            - touch foo
            - 'if [ "$(stat -c "%u" foo)" != "1000" ]; then'
            -   'echo "File is $(stat foo)"'
            -    exit 1
            - fi

    test_pipeline_variables:
      - variables:
          - name: FILENAME
          - name: MESSAGE
          - name: EMPTY
          - name: VAR_WITH_DEFAULT_1
            default: Default 1
          - name: VAR_WITH_DEFAULT_2
            default: Default 2
          - name: VAR_WITH_CHOICE
            default: dev
            allowed-values:
              - dev
              - staging
              - production
          - name: VAR_WITH_CHOICE_USING_DEFAULT
            default: ghi
            allowed-values:
              - abc
              - def
              - ghi
      - step:
          name: Test Pipeline Variables
          artifacts:
            - output/**
          script:
            - 'if [ -n "${EMPTY}" ]; then exit 1; fi'
            - 'echo "FILENAME: ${FILENAME:?}"'
            - 'echo "MESSAGE: ${MESSAGE:?}"'
            - mkdir output
            - 'echo "Message: ${MESSAGE}" >> "output/${FILENAME}"'
            - 'echo "Var With Default 1: ${VAR_WITH_DEFAULT_1}" >> "output/${FILENAME}"'
            - 'echo "Var With Default 2: ${VAR_WITH_DEFAULT_2}" >> "output/${FILENAME}"'
            - 'echo "Var With Choice: ${VAR_WITH_CHOICE}" >> "output/${FILENAME}"'
            - 'echo "Var With Choice Using Default: ${VAR_WITH_CHOICE_USING_DEFAULT}" >> "output/${FILENAME}"'

    test_manual_trigger:
      - step:
          name: Setup
          artifacts:
            - setup_done
          script:
            - touch setup_done
      - step:
          name: Manual Step
          trigger: manual
          script:
            - echo "This is the manual step"

    test_parallel_steps:
      - parallel:
        - step:
            name: Step 1 of 2
            script:
              - set -eu
              - '[ "${BITBUCKET_PARALLEL_STEP}" = 0 ]'
              - '[ "${BITBUCKET_PARALLEL_STEP_COUNT}" = 2 ]'
        - step:
            name: Step 2 of 2
            script:
              - set -eu
              - '[ "${BITBUCKET_PARALLEL_STEP}" = 1 ]'
              - '[ "${BITBUCKET_PARALLEL_STEP_COUNT}" = 2 ]'

    test_environment_variables:
      - step:
          name: Output env vars
          script:
            - env | tee variables
          artifacts:
            - variables

    test_pipe:
      - step:
          name: Test
          script:
            - pipe: atlassian/demo-pipe-bash:0.1.0
              variables:
                NAME: |-
                  name
                  'name-in-single-quotes'
                  "name-in-double-quotes"

    test_ssh_key:
      - step:
          name: Test ssh key
          script:
            - apk add openssh
            - |-
              cat << EOF > /tmp/ssh-conf
              IdentityFile /opt/atlassian/pipelines/agent/ssh/id_rsa
              ServerAliveInterval 180
              EOF
            - test "$(sha256sum /tmp/ssh-conf | cut -d ' ' -f 1)" == "$(sha256sum ~/.ssh/config | cut -d ' ' -f 1)"
            - ssh-keygen -l -f /opt/atlassian/pipelines/agent/ssh/id_rsa
          artifacts:
            - variables

    test_ssh_agent:
      - step:
          name: Test ssh agent
          script:
            - test -e /ssh-agent || exit 42
            - test "$(cat /ssh-agent)" == "some-ssh-agent" || exit 1

    test_docker_buildkit:
      - step:
          name: Test build docker image with buildkit
          script:
            - |
              cat << EOF > Dockerfile
              FROM alpine
              RUN apk --no-cache add bash
              ENTRYPOINT ["bash"]
              EOF
            - DOCKER_BUILDKIT=1 docker build -t buildtest .
          services:
            - docker
          caches:
            - docker
