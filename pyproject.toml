[tool.poetry]
name = "bitbucket-pipeline-runner"
version = "0.3.7"
description = "Run a bitbucket pipeline locally"
authors = ["Mathieu Lemay <acidrain1@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/mathieu-lemay/pipeline-runner"
packages = [
    {include = "pipeline_runner"}
]

[tool.poetry.dependencies]
python = "^3.9"
PyYAML = "^6.0"
docker = "^6.0.0"
click = "^8.0.1"
python-slugify = "^8.0.0"
# Pin boto3 to a specific version to avoid poetry's resolver
# to go on forever.
# https://github.com/python-poetry/poetry/issues/7858
boto3 = "1.26.135"
GitPython = "^3.1.12"
python-dotenv = "^1.0.0"
requests = "^2.25.1"
coloredlogs = "^15.0"
pyfzf = "^0.3.0"
pydantic = "^1.8.2"
appdirs = "^1.4.4"
cryptography = "^40.0.2"
tenacity = "^8.0.1"

[tool.poetry.dev-dependencies]
pytest = "^7.0.1"
pytest-mock = "^3.5.1"
coverage = { version = "^7.0.1", extras = ["toml"] }

[tool.poetry.scripts]
pipeline-runner = 'pipeline_runner.cli:main'

[tool.black]
line-length = 120

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 120

[tool.ruff]
exclude = [".venv"]
ignore = ["E501"]
line-length = 120
select = [
    "A",  # flake8-builtins
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90",  # mccabe
    "E",  # pycodestyle
    "ERA",  # flake8-eradicate
    "F",  # Pyflakes
    "G",  # flake8-logging-format
    "I",  # flake8-isort
    "N",  # pep8-naming
    "PT",  # flake8-pytest-style
    "RUF",  # ruff
    "S",  # flake8-bandit
    "W",  # pycodestyle
]

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator"
]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "S101",  # Use of `assert` detected
    "S105",  # Possible hardcoded password
]

[tool.pytest.ini_options]
markers = ["integration: Integration tests that run full pipelines."]

[tool.coverage.run]
branch = true
source = ["pipeline_runner", "tests"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "raise NotImplementedError"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
