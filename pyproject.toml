[tool.poetry]
name = "bitbucket-pipeline-runner"
version = "0.3.11"
description = "Run a bitbucket pipeline locally"
authors = ["Mathieu Lemay <acidrain1@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/mathieu-lemay/pipeline-runner"
packages = [
    {include = "pipeline_runner"}
]

[tool.poetry.dependencies]
python = "^3.10"
PyYAML = "^6.0"
docker = "^7.0.0"
click = "^8.0.1"
python-slugify = "^8.0.0"
boto3 = "^1.28.65"
GitPython = "^3.1.12"
python-dotenv = "^1.0.0"
requests = "^2.31.0"
coloredlogs = "^15.0"
pyfzf = "^0.3.0"
pydantic = "^2.0"
pydantic-settings = "^2.0.3"
appdirs = "^1.4.4"
cryptography = "^41.0.2"
tenacity = "^8.0.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.1"
pytest-mock = "^3.5.1"
coverage = { version = "^7.0.1", extras = ["toml"] }
mypy = "^1.4.0"
types-appdirs = "^1.4.3.5"
types-setuptools = "^69.0.0.0"
types-pyyaml = "^6.0.12.10"
types-python-slugify = "^8.0.0.2"
types-boto3 = "^1.0.2"

[tool.poetry.scripts]
pipeline-runner = 'pipeline_runner.cli:main'

[tool.black]
line-length = 120

[tool.mypy]
namespace_packages=true
explicit_package_bases=true
strict=true
show_error_codes=true
plugins=["pydantic.mypy"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.ruff]
target-version = "py310"
exclude = [".venv"]
line-length = 120
select = [
    "ALL"
]
ignore = [
    "COM",  # flake8-commas
    "D",  # pydocstyle
    "FIX",  # flake8-fixme
    "PTH",  # flake8-use-pathlib
    "TD",  # flake8-todos

    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "PLR0913",  # Too many arguments to function call
    "TRY002",  # Create your own exception
    "TRY003",  # Avoid specifying long messages outside the exception class
]

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.field_validator",
    "pydantic.model_validator",
    "pydantic.root_validator"
]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "PLR2004",  # Magic value used in comparison
    "S101",  # Use of `assert` detected
    "S105",  # Possible hardcoded password
]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["pipeline_runner", "tests"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "raise NotImplementedError"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
